#!/usr/bin/env node

// Test script to verify environment variable splitting functionality
const path = require('path');
const fs = require('fs');

// Mock the CLI class to test the createEnvFile function
class TestCLI {
  createEnvFile(envVars) {
    const envPath = path.join(process.cwd(), '.env');
    const lines = Object.entries(envVars).map(([key, value]) => `${key}=${value}`);
    
    // Check if there are any split environment variables
    const splitVars = new Set();
    Object.keys(envVars).forEach(key => {
      const match = key.match(/^(.+)_(\d+)$/);
      if (match) {
        splitVars.add(match[1]);
      }
    });
    
    // Add helpful comments
    const content = [
      '# bruvtools Environment Variables',
      '# Generated by: bruvtools init',
      '# Keep this file secure and never commit to version control!',
      ''
    ];
    
    // Add split variable instructions if any exist
    if (splitVars.size > 0) {
      content.push('# ðŸ”§ Split Environment Variables Detected');
      content.push('# Some large environment variables have been automatically split into parts.');
      content.push('# Your app should use the getEnvVar() function to automatically reconstruct them:');
      content.push('#');
      content.push('# function getEnvVar(varName) {');
      content.push('#   if (process.env[varName]) return process.env[varName];');
      content.push('#   let reconstructed = \'\';');
      content.push('#   let partIndex = 1;');
      content.push('#   while (true) {');
      content.push('#     const part = process.env[`${varName}_${partIndex}`];');
      content.push('#     if (part) { reconstructed += part; partIndex++; }');
      content.push('#     else break;');
      content.push('#   }');
      content.push('#   return reconstructed || undefined;');
      content.push('# }');
      content.push('#');
      splitVars.forEach(varName => {
        content.push(`# Usage: const ${varName.toLowerCase()} = getEnvVar('${varName}');`);
      });
      content.push('');
    }
    
    content.push(...lines);
    content.push('');

    fs.writeFileSync(envPath, content.join('\n'), 'utf8');
    console.log(`âœ… Created ${envPath}`);
    
    if (splitVars.size > 0) {
      console.log(`ðŸ’¡ Split variables detected: ${Array.from(splitVars).join(', ')}`);
      console.log(`   Use getEnvVar('VARIABLE_NAME') in your app to reconstruct them.`);
    }
  }
}

// Test the functionality
console.log('ðŸ§ª Testing Environment Variable Splitting Functionality\n');

const cli = new TestCLI();

// Simulate a large JWT token being split
const largeToken = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjIwMzQ3ZWI1OWY0NzE5NmJjZGM4OTU4OWY5YTFjOGNkMjU3Y2QyYTM3YTE0MTE0YWFhY2FhZTEzYjBkYTZjN2NhYTExZTFmYTY5OWZhNzVlIn0.eyJhdWQiOiJkZGQ3MjM4MC02NTNjLTQ5MTctYTRiYi01YjMxOTU0ZTNhY2EiLCJqdGkiOiIyMDM0N2ViNTlmNDcxOTZiY2RjODk1ODlmOWExYzhjZDI1N2NkMmEzN2ExNDExNGFhYWNhYWUxM2IwZGE2YzdjYWExMWUxZmE2OTlmYTc1ZSIsImlhdCI6MTc0ODQ4NDY4NSwibmJmIjoxNzQ4NDg0Njg1LCJleHAiOjE4Nzc5MDQwMDAsInN1YiI6IjEzMDIzOTY0IiwiZ3JhbnRfdHlwZSI6IiIsImFjY291bnRfaWQiOjMxNjM3NTUxLCJiYXNlX2RvbWFpbiI6ImtvbW1vLmNvbSIsInZlcnNpb24iOjIsInNjb3BlcyI6WyJjcm0iLCJmaWxlcyIsImZpbGVzX2RlbGV0ZSIsIm5vdGlmaWNhdGlvbnMiLCJwdXNoX25vdGlmaWNhdGlvbnMiXSwiaGFzaF91dWlkIjoiNjU5NDAxNGYtMTgzNS00ZmEwLTgxOGUtYzViYzk5Y2QxYWY4IiwiYXBpX2RvbWFpbiI6ImFwaS1nLmtvbW1vLmNvbSJ9.D1Yh6cVMqUdqBoeDR2NLX4EgFHbe5g0g1w_4__3Akg6m7jCFSKoWkbw-HFQuylayBuW4MEIzrkBeNTpM9JIj5ccFedCEpR303mZf4tpe_pUlE6Knk8cpvYGhZY1T0P-SWhO9khWxpiv1mxnhsQs53czvfwTjze0IonM7Mx3yvALbcXvwiW-j75aYUfwvU1xqHRFLjQ9BhHDVpk8vMAsEgrlzSnHUcGjD-Fj5FuwnH8_Dv7aueW-yWOJFGI9o7QTpttxIRZ2lbiqLmw6E1BXyQifZzZPNb1JWVehZX_vKjudZWLumHsej62yGdUe2eeyVLgLgtfRjgqzmVar7Ac62bw";

// Simulate the splitting logic
const maxSize = 400;
const envVars = {};

// Add some regular environment variables
envVars.NODE_ENV = 'production';
envVars.PORT = '3000';

// Split the large token
let partIndex = 1;
for (let i = 0; i < largeToken.length; i += maxSize) {
  const chunk = largeToken.slice(i, i + maxSize);
  const partKey = `KOMMO_ACCESS_TOKEN_${partIndex}`;
  envVars[partKey] = chunk;
  console.log(`ðŸ“¦ ${partKey}: ${chunk.length} chars`);
  partIndex++;
}

console.log(`\nðŸ”§ Creating .env file with ${Object.keys(envVars).length} environment variables...\n`);

// Test the createEnvFile function
cli.createEnvFile(envVars);

console.log('\nðŸ“„ Generated .env file contents:');
console.log('='.repeat(50));
const envContent = fs.readFileSync('.env', 'utf8');
console.log(envContent);

console.log('='.repeat(50));
console.log('âœ… Test completed successfully!');
console.log('ðŸ’¡ The CLI will now automatically detect large environment variables');
console.log('   and offer to split them during interactive setup.'); 